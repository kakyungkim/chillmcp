#!/usr/bin/env python3
"""ChillMCP 서버 테스트 클라이언트"""

import asyncio
from mcp.client.session import ClientSession
from mcp.client.stdio import stdio_client, StdioServerParameters

async def test_server():
    """서버 테스트"""
    
    # 서버 파라미터 설정 (커스텀 파라미터 포함)
    server_params = StdioServerParameters(
        command="python",
        args=["main.py", "--boss_alertness", "80", "--boss_alertness_cooldown", "60"],
        env=None
    )
    
    print("🔌 ChillMCP 서버에 연결 중...")
    
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # 서버 초기화
            await session.initialize()
            print("✅ 서버 초기화 완료\n")
            
            # 사용 가능한 도구 목록 확인
            tools = await session.list_tools()
            print(f"📋 사용 가능한 도구: {len(tools.tools)}개")
            for tool in tools.tools:
                print(f"   - {tool.name}: {tool.description}")
            print()
            
            # 도구 테스트 1: take_a_break
            print("=" * 60)
            print("🧪 테스트 1: take_a_break")
            print("=" * 60)
            result = await session.call_tool("take_a_break", arguments={"duration": 5})
            print(f"{result.content[0].text}\n")
            
            # 도구 테스트 2: watch_netflix
            print("=" * 60)
            print("🧪 테스트 2: watch_netflix")
            print("=" * 60)
            result = await session.call_tool("watch_netflix", arguments={"show": "오징어 게임"})
            print(f"{result.content[0].text}\n")
            
            # 도구 테스트 3: bathroom_break
            print("=" * 60)
            print("🧪 테스트 3: bathroom_break")
            print("=" * 60)
            result = await session.call_tool("bathroom_break", arguments={})
            print(f"{result.content[0].text}\n")
            
            # 도구 테스트 4: coffee_mission
            print("=" * 60)
            print("🧪 테스트 4: coffee_mission")
            print("=" * 60)
            result = await session.call_tool("coffee_mission", arguments={"coffee_type": "아메리카노"})
            print(f"{result.content[0].text}\n")
            
            # 도구 테스트 5: urgent_call
            print("=" * 60)
            print("🧪 테스트 5: urgent_call")
            print("=" * 60)
            result = await session.call_tool("urgent_call", arguments={})
            print(f"{result.content[0].text}\n")
            
            # 도구 테스트 6: deep_thinking
            print("=" * 60)
            print("🧪 테스트 6: deep_thinking")
            print("=" * 60)
            result = await session.call_tool("deep_thinking", arguments={})
            print(f"{result.content[0].text}\n")
            
            # 도구 테스트 7: email_organizing
            print("=" * 60)
            print("🧪 테스트 7: email_organizing")
            print("=" * 60)
            result = await session.call_tool("email_organizing", arguments={"shopping_item": "노트북 거치대"})
            print(f"{result.content[0].text}\n")
            
            # 도구 테스트 8: show_meme
            print("=" * 60)
            print("🧪 테스트 8: show_meme")
            print("=" * 60)
            result = await session.call_tool("show_meme", arguments={"category": "고양이"})
            print(f"{result.content[0].text}\n")
            
            print("=" * 60)
            print("✅ 모든 테스트 완료!")
            print("=" * 60)

if __name__ == "__main__":
    asyncio.run(test_server())

